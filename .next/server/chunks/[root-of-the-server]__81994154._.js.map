{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 172, "column": 0}, "map": {"version":3,"sources":["file:///Users/rawling/americanbully/src/app/api/contact/route.ts"],"sourcesContent":["import nodemailer from 'nodemailer';\n\nexport async function POST(req: Request) {\n  try {\n    const body = await req.json();\n    const { name, email, phone, cityState, subject, message } = body;\n\n    if (!name || !email || !phone || !cityState || !subject || !message) {\n      return new Response(JSON.stringify({ error: 'Please fill in all required fields.' }), { status: 400 });\n    }\n\n    const transporter = nodemailer.createTransport({\n      host: process.env.ZOHO_HOST,\n      port: Number(process.env.ZOHO_PORT),\n      secure: true,\n      auth: {\n        user: process.env.ZOHO_EMAIL,\n        pass: process.env.ZOHO_PASSWORD,\n      },\n    });\n\n    const htmlContent = `\n      <h1>New Inquiry from 601bullies.com</h1>\n      <p><strong>Name:</strong> ${name}</p>\n      <p><strong>Email:</strong> <a href=\"mailto:${email}\">${email}</a></p>\n      <p><strong>Phone:</strong> ${phone}</p>\n      <p><strong>City/State:</strong> ${cityState}</p>\n      <hr />\n      <p><strong>Subject:</strong> ${subject}</p>\n      <p><strong>Message:</strong></p>\n      <p>${message.replace(/\\n/g, '<br/>')}</p>\n    `;\n\n    const mailOptions = {\n      // --- THIS IS THE FIX ---\n      // The email will now show as being from the person's name via your site\n      from: `\"${name} via 601 Bullies\" <${process.env.ZOHO_EMAIL}>`,\n      // Add this line so when you hit \"Reply\", it replies to their email, not yours\n      replyTo: email,\n      \n      to: 'contact@601bullies.com', // Your receiving email address\n      subject: `New Puppy Inquiry: ${subject}`,\n      html: htmlContent,\n    };\n\n    await transporter.sendMail(mailOptions);\n\n    return new Response(JSON.stringify({ message: 'Message sent successfully!' }), { status: 200 });\n\n  } catch (error) {\n    console.error('Mail send error:', error);\n    return new Response(JSON.stringify({ error: 'Internal server error.' }), { status: 500 });\n  }\n}"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE,OAAO,EAAE,GAAG;QAE5D,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,SAAS,CAAC,aAAa,CAAC,WAAW,CAAC,SAAS;YACnE,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;gBAAE,OAAO;YAAsC,IAAI;gBAAE,QAAQ;YAAI;QACtG;QAEA,MAAM,cAAc,iJAAA,CAAA,UAAU,CAAC,eAAe,CAAC;YAC7C,MAAM,QAAQ,GAAG,CAAC,SAAS;YAC3B,MAAM,OAAO,QAAQ,GAAG,CAAC,SAAS;YAClC,QAAQ;YACR,MAAM;gBACJ,MAAM,QAAQ,GAAG,CAAC,UAAU;gBAC5B,MAAM,QAAQ,GAAG,CAAC,aAAa;YACjC;QACF;QAEA,MAAM,cAAc,CAAC;;gCAEO,EAAE,KAAK;iDACU,EAAE,MAAM,EAAE,EAAE,MAAM;iCAClC,EAAE,MAAM;sCACH,EAAE,UAAU;;mCAEf,EAAE,QAAQ;;SAEpC,EAAE,QAAQ,OAAO,CAAC,OAAO,SAAS;IACvC,CAAC;QAED,MAAM,cAAc;YAClB,0BAA0B;YAC1B,wEAAwE;YACxE,MAAM,CAAC,CAAC,EAAE,KAAK,mBAAmB,EAAE,QAAQ,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;YAC7D,8EAA8E;YAC9E,SAAS;YAET,IAAI;YACJ,SAAS,CAAC,mBAAmB,EAAE,SAAS;YACxC,MAAM;QACR;QAEA,MAAM,YAAY,QAAQ,CAAC;QAE3B,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,SAAS;QAA6B,IAAI;YAAE,QAAQ;QAAI;IAE/F,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,oBAAoB;QAClC,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,OAAO;QAAyB,IAAI;YAAE,QAAQ;QAAI;IACzF;AACF","debugId":null}}]
}